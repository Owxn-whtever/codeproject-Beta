#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <SPI.h>

// ‚ö° WiFi Credentials
const char* ssid = "Owxn";            
const char* password = "Owxn2409";    

// ‚ö° Telegram Bot Tokens ‡πÅ‡∏•‡∏∞ Chat IDs
const String botTokens[] = {
    "7713083064:AAFNzaIMmlDjwM6nyl6z1eAwkKHY1Zcnu9Q",
    "7702438986:AAEeokB03nKz0Y9s7Vs4VWi-U7pzHHVO8v8",
    "8175471471:AAG3IpS62xQb_2pR-ZwfZnH_aVMy5ekjukw"
};
const int numBots = sizeof(botTokens) / sizeof(botTokens[0]);

const String chatIds[][2] = { 
    {"-4734652541"}, // ‡∏ö‡∏≠‡∏ó 1
    {"-4767274518"},   // ‡∏ö‡∏≠‡∏ó 2
    {"6928484464"}    // ‡∏ö‡∏≠‡∏ó 3
};
const int chatCounts[] = {2, 2, 2}; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chat ‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó

// ‚ö° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IR Sensor
const int irSensorPins[] = {D1, D2, D3, D4, D5}; 
const int numSensors = sizeof(irSensorPins) / sizeof(irSensorPins[0]);

bool previousState[numSensors]; 
unsigned long lastDocumentTime[numSensors]; 
const unsigned long debounceTime = 5000;  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

WiFiClientSecure client;
UniversalTelegramBot* bots[numBots];

// ‚ö° **WiFi & Telegram Bot Initialization**
void setup() {
    Serial.begin(115200);
    SPI.begin();

    Serial.print("üîó Connecting to WiFi");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\n‚úÖ WiFi Connected!");
    Serial.print("üì° IP Address: ");
    Serial.println(WiFi.localIP());

    // ‚ö° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram Bots
    client.setInsecure(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL
    for (int i = 0; i < numBots; i++) {
        bots[i] = new UniversalTelegramBot(botTokens[i], client);
    }

    // ‚ö° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IR Sensors
    for (int i = 0; i < numSensors; i++) {
        pinMode(irSensorPins[i], INPUT);
        previousState[i] = digitalRead(irSensorPins[i]);
        lastDocumentTime[i] = 0;
    }
}

// ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
void sendNotificationToSpecificBot(int botIndex, const String& message) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå WiFi ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
        return;
    }

    Serial.println("üì© Sending notification...");
    for (int chatIndex = 0; chatIndex < chatCounts[botIndex]; chatIndex++) {
        Serial.print("‚û° Sending to Chat ID: ");
        Serial.println(chatIds[botIndex][chatIndex]);

        bool sent = bots[botIndex]->sendMessage(chatIds[botIndex][chatIndex], message, "Markdown");
        if (sent) {
            Serial.println("‚úÖ Notification sent successfully!");
        } else {
            // ‡πÉ‡∏ä‡πâ _lastError ‡πÅ‡∏ó‡∏ô getError
            Serial.println("‚ùå Failed to send notification. Error: " + String(bots[botIndex]->_lastError));
        }
    }
}

// ‚ö° Loop ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
void loop() {
    for (int i = 0; i < numSensors; i++) {
        bool currentState = digitalRead(irSensorPins[i]);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å HIGH -> LOW (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)
        if (previousState[i] == HIGH && currentState == LOW) {
            unsigned long currentTime = millis();
            if (currentTime - lastDocumentTime[i] > debounceTime) {
                Serial.println("üìÑ Document detected in drawer " + String(i + 1));
                sendNotificationToSpecificBot(0, "üìÑ ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡∏ó‡∏µ‡πà " + String(i + 1));
                lastDocumentTime[i] = currentTime;
            }
        }
        previousState[i] = currentState;
    }

    delay(1000); // ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Loop
}
